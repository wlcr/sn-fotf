/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type InfoSection = {
  _type: 'infoSection'
  heading?: string
  subheading?: string
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      linkType?: 'href' | 'page'
      href?: string
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type ImageContentSection = {
  _type: 'imageContentSection'
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'mediaImage'
  }
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      linkType?: 'href' | 'page'
      href?: string
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  button?: LinkButton
  sectionLayout?: 'imageLeft' | 'imageRight' | 'imageAbove'
  contentAlign?: 'alignLeft' | 'alignRight' | 'alignCenter'
  typeSize?: 2 | 3 | 5 | 7
}

export type ImageSection = {
  _type: 'imageSection'
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'mediaImage'
  }
}

export type FaqSection = {
  _type: 'faqSection'
  title?: string
  faqItems?: Array<{
    question?: string
    answer?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        linkType?: 'href' | 'page'
        href?: string
        page?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'page'
        }
        openInNewTab?: boolean
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
    hidden?: boolean
    _type: 'faqItem'
    _key: string
  }>
}

export type ContentSection = {
  _type: 'contentSection'
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      linkType?: 'href' | 'page'
      href?: string
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  button?: LinkButton
  contentAlign?: 'alignLeft' | 'alignRight' | 'alignCenter'
  typeSize?: 2 | 3 | 5 | 7
}

export type SideBySideCta = {
  _type: 'sideBySideCta'
  sideA: CallToAction
  sideB: CallToAction
}

export type Menu = Array<{
  title?: string
  link?: Link
  _type: 'menuItem'
  _key: string
}>

export type LinkButton = {
  _type: 'linkButton'
  buttonText?: string
  link?: Link
}

export type CallToAction = {
  _type: 'callToAction'
  heading: string
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      linkType?: 'href' | 'page'
      href?: string
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  buttonText?: string
  link?: Link
  backgroundImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    linkType?: 'href' | 'page'
    href?: string
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page'
    }
    openInNewTab?: boolean
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type ProductDecorator = {
  _id: string
  _type: 'productDecorator'
  _createdAt: string
  _updatedAt: string
  _rev: string
  productSlug?: Slug
  nameOverride?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FaqSection)
    | ({
        _key: string
      } & ContentSection)
    | ({
        _key: string
      } & ImageContentSection)
    | ({
        _key: string
      } & ImageSection)
  >
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  venueName: string
  address?: string
  phone?: string
  email?: string
  googleMapLink?: string
  title: string
  description?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: 'image'
  }
}

export type Homepage = {
  _id: string
  _type: 'homepage'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  heroVideo?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & ContentSection)
    | ({
        _key: string
      } & ImageContentSection)
    | ({
        _key: string
      } & ImageSection)
    | ({
        _key: string
      } & SideBySideCta)
  >
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
  heading: string
  subheading?: string
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'mediaImage'
  }
  pageBuilder?: Array<
    | ({
        _key: string
      } & ContentSection)
    | ({
        _key: string
      } & ImageContentSection)
    | ({
        _key: string
      } & ImageSection)
    | ({
        _key: string
      } & FaqSection)
    | ({
        _key: string
      } & CallToAction)
    | ({
        _key: string
      } & InfoSection)
  >
}

export type MediaImage = {
  _type: 'mediaImage'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
  }
  media?: unknown
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  alt?: string
}

export type Header = {
  _id: string
  _type: 'header'
  _createdAt: string
  _updatedAt: string
  _rev: string
  mainMenu?: Menu
  showAddress?: boolean
  showPhone?: boolean
  announcementBar?: {
    text?: string
    link?: Link
    enabled?: boolean
  }
}

export type Footer = {
  _id: string
  _type: 'footer'
  _createdAt: string
  _updatedAt: string
  _rev: string
  footerMenu?: Menu
  privacyLink?: Link
  termsLink?: Link
}

export type Link = {
  _type: 'link'
  linkType?: 'href' | 'page'
  href?: string
  page?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'page'
  }
  openInNewTab?: boolean
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height: number
  width: number
  aspectRatio: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x: number
  y: number
  height: number
  width: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top: number
  bottom: number
  left: number
  right: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | InfoSection
  | ImageContentSection
  | ImageSection
  | FaqSection
  | ContentSection
  | SideBySideCta
  | Menu
  | LinkButton
  | CallToAction
  | BlockContent
  | ProductDecorator
  | Settings
  | Homepage
  | Page
  | MediaImage
  | Header
  | Footer
  | Link
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
